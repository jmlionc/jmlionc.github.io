---
title: "M√≥dulo 2: Introducci√≥n a RStudio"
subtitle: "Bioestad√≠stica Fundamental y Estad√≠stica Fundamental para las Ciencias de la Salud"
author: 
- name: "Jose Miguel Leon Puentes"
  affiliation: "Departamento de Estad√≠stica"
institute: "Universidad Nacional de Colombia"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-title: Tabla de Contenido
    other-links:
      - text: Contacto
        icon: mailbox
        href: mailto:joleonp@unal.edu.co
    code-links:
      - text: GitHub
        icon: github
        href: https://github.com/jmlionc/AppliedBiostats

editor: visual
---

## üî∞ Introducci√≥n

::: {style="text-align: justify;"}
En este m√≥dulo se introduce el **lenguaje R y el entorno RStudio**, herramientas fundamentales para el an√°lisis estad√≠stico y la programaci√≥n en diferentes campos de la ciencia. El prop√≥sito es guiar al estudiante en la **descarga, instalaci√≥n y configuraci√≥n** del software, as√≠ como en la **exploraci√≥n de su interfaz** y sus principales funcionalidades.

A lo largo del m√≥dulo se abordan los siguientes aspectos:

-   **Conceptos b√°sicos de programaci√≥n** y su importancia en el razonamiento l√≥gico y cient√≠fico.

-   **Historia y caracter√≠sticas de R**, sus ventajas frente a otros softwares y el papel de la comunidad que lo respalda.

-   **Exploraci√≥n de RStudio**, sus paneles y atajos m√°s importantes para facilitar el trabajo diario.

-   **Operaciones b√°sicas en R**: desde c√°lculos simples hasta la creaci√≥n de objetos, variables y estructuras de datos como vectores, matrices, data frames y listas.

-   **Tipos de datos en R** y funciones esenciales para su manipulaci√≥n y verificaci√≥n.

-   **Instalaci√≥n y uso de paquetes**, indispensables para ampliar las capacidades de R en an√°lisis estad√≠stico y programaci√≥n avanzada.

-   **Alternativas a RStudio** y plataformas en la nube (Posit Cloud, Google Colab, VS Code).

Este m√≥dulo busca que el estudiante adquiera **autonom√≠a en el uso del software**, desarrolle confianza en la escritura de c√≥digo y est√© preparado para avanzar en los siguientes contenidos del curso.
:::

## üéØ Objetivos

::: {style="text-align: justify;"}
1.  Entender el proceso de descarga, instalaci√≥n y configuraci√≥n de R y RStudio.
2.  Reconocer las secciones y funciones principales de la interfaz de RStudio.
3.  Valorar la importancia de R como software estad√≠stico libre, destacando sus ventajas, diferencias y el rol de su comunidad frente a otros softwares.
4.  Introducir los fundamentos de programaci√≥n en R, fomentando confianza en la escritura de c√≥digo.
5.  Familiarizarse con los principales tipos de datos, variables y estructuras (vectores, matrices, data frames, listas).
6.  Explorar funciones b√°sicas de R para la creaci√≥n, manipulaci√≥n y verificaci√≥n de objetos.
7.  Promover la autonom√≠a en el uso de R y RStudio, preparando al estudiante para el desarrollo de los siguientes m√≥dulos.
:::

## üìñ Desarrollo

### üé® El arte de programar

::: {style="text-align: justify;"}
El proceso de programaci√≥n, como lo define Hadley Wickham, Chief Scientist en Posit y l√≠der del equipo de tidyverse, en su libro R for Data Science, consta de las siguientes etapas:

![Figura 1: En nuestro modelo de proceso de ciencia de datos, se empieza por importar y ordenar los datos. A continuaci√≥n, se comprenden los datos mediante un ciclo iterativo de transformaci√≥n, visualizaci√≥n y modelizaci√≥n. El proceso finaliza con la comunicaci√≥n de los resultados a otras personas. Tomada de **R for Data Science (2e).**](etapas_programaci√≥n.png){fig-align="center"}

Saber programar no implica necesariamente memorizar las librer√≠as y funciones de Python, R, C++, etc., ni te lo garantiza realizar cursos en los que copies y pegues c√≥digo para ver la salida de estos. Programar involucra un proceso de razonamiento, que, de desarrollarse permitir√° al usuario desenvolverse en diversos escenarios, para diferentes retos y en distintos programas. Este proceso, contrario a lo que se cree tiene como prop√≥sito ser √∫til, ameno, replicable y funcionar como una herramienta desarrollada para facilitar procesos y producir nuevo conocimiento.
:::

::: callout-quote
> "Programs must be written for people to read, and only incidentally for machines to execute."\
> ‚Äî Hal Abelson
:::

::: {style="text-align: justify;"}
Programar no se reduce a solucionar un problema a trav√©s de c√≥digo, tambi√©n es la documentaci√≥n de c√≥mo este fue resuelto para que las personas interesadas puedan entender el camino que se sigui√≥. Hardley, lo define bajo los siguientes principios: estar centrado en el ser humano, ser coherente, componible e inclusivo. Los mismos que componen el universo Tidyverse, colecci√≥n de paquetes en R que veremos m√°s adelante.
:::

::: {style="text-align: center;"}
| Datos ‚û°Ô∏è Informaci√≥n ‚û°Ô∏è Conocimiento
:::

### üõ†Ô∏è R y RStudio

::: {style="text-align: justify;"}
R fue creado a principios de la d√©cada de 1990 por los estad√≠sticos de la Universidad de Auckland, Ross Ihaka y Robert Gentleman. Por si alguno de ustedes se lo preguntaba, s√≠, el lenguaje se llama R por ser la inicial de ambos nombres de los autores.
:::

::: {.callout-tip appearance="minimal"}
"R tiene sus or√≠genes en S, un lenguaje de programaci√≥n creado en los Laboratorios Bell de Estados Unidos. S√≠, los mismos laboratorios que inventaron el transistor, el l√°ser, el sistema operativo Unix y algunas otras cosas m√°s." Juan Bosco Mendoza Vega - R para principiantes.
:::

::: {style="text-align: justify;"}
R es un lenguaje de programaci√≥n de uso libre con una gran comunidad a nivel mundial. La cual al ser activa mantiene a R en constante renovaci√≥n y actualizaci√≥n, esto lo hace un software poderoso y vers√°til. Al momento de escribir este material vamos en la versi√≥n 4.4.1 "Race for Your Life"

Es un programa gratuito, multiplataforma, con extensa documentaci√≥n como soporte a sus numerosos m√©todos, funciones y tecnolog√≠a que crece todos los d√≠as. Permite realizar investigaci√≥n reproducible y la posibilidad de programar un proyecto de diversas maneras.

R nos permite hacer an√°lisis de c√°lculo estad√≠stico y graficaci√≥n.
:::

#### Entonces, ¬øuso R, Python o Excel?

::: {style="text-align: justify;"}
Ning√∫n lenguaje de programaci√≥n es mejor que otro, cada uno tiene sus puntos fuertes y es ut√≠l en escenarios particulares. En ocasiones nos ser√° mas ventajoso trabajar con los datos desde Excel, sin embargo este curso se desarrollara en su basta mayor√≠a a trav√©s de `R`, m√°s precisamente, RStudio.
:::

#### ¬øD√≥nde puedo usar R?

::: {style="text-align: justify;"}
Podemos usar el lenguaje de programaci√≥n `R` a trav√©s de diferentes servicios, algunos de instalaci√≥n local y otros a los que podremos acceder de manera gratuita a trav√©s de internet.

Existen alternativas a Rstudio como lo son Visual Studio Code y Google Colab por medio de los cuales podemos programar con c√≥digo R pero sin la posibilidad de aprovechar los beneficios y funciones de la aplicaci√≥n RStudio.

Algunas de las alternativas m√°s comunes son:
:::

| Cloud-based solution | Softwares          |
|----------------------|--------------------|
| Posit Cloud          | RStudio Desktop    |
| Google Colab         | Visual Studio Code |

: Herramientas para programar en lenguaje R

::: {style="text-align: justify;"}
Existen alternativas a Rstudio como lo vemos en la anterior tabla, por medio de los cuales podemos programar en c√≥digo R pero sin la posibilidad de aprovechar los beneficios y funciones de la aplicaci√≥n RStudio mencionados previamente.

Algunas de las caracter√≠sticas m√°s relevantes de cada uno se listan a continuaci√≥n:

-   **Posit Cloud:** Posit Cloud es una soluci√≥n basada en la nube que le permite acceder al potente conjunto de herramientas de ciencia de datos de Posit directamente desde su navegador, sin necesidad de instalaciones ni configuraciones complejas.\
    Acceso a trav√©s de: [Posit Cloud Website](https://login.posit.cloud/login?redirect=%2F)

-   **Google Colab:** Colab es un servicio alojado de Jupyter Notebook que no requiere configuraci√≥n y proporciona acceso gratuito a recursos inform√°ticos, incluidas GPU y TPU. Colab es especialmente adecuado para el aprendizaje autom√°tico, la ciencia de datos y la educaci√≥n.\
    Acceso a trav√©s de: [Colab Website](https://colab.research.google.com/?hl=es)

-   **Visual Studio Code:** VS Code es un editor de c√≥digo fuente ligero pero eficaz desarrollado por Microsoft que se ejecuta en el escritorio y est√° disponible para Windows, macOS y Linux. Incluye compatibilidad integrada con JavaScript, TypeScript y Node.js, y cuenta con un amplio ecosistema de extensiones para otros lenguajes y entornos de ejecuci√≥n.\
    Acceso a trav√©s de: [Download Visual Studio](https://code.visualstudio.com/Download)

-   **RStudio Desktop:** es un entorno de desarrollo integrado (IDE) dise√±ado para ayudarle a ser m√°s productivo en su trabajo diario de ciencia de datos. En otras palabras, es la herramienta que nos permitir√° programar en lenguaje R, la interfaz y el veh√≠culo de nuestro an√°lisis. Ademas del an√°lisis ya mencionado, permite la integraci√≥n de otros lenguajes de programaci√≥n y la consolidaci√≥n de documentos, presentaciones, aplicaciones, libros, entre otras m√°s.
:::

### üö™ Instalaci√≥n de R y RStudio

::: {style="text-align: justify;"}
Para dar inicio al proceso de instalaci√≥n de R y RStudio Desktop, ser√° redirigido a la p√°gina web oficial dando click [aqu√≠](https://posit.co/download/rstudio-desktop/), all√≠ encontrar√° la posibilidad de descargar ambos archivos. Para el caso de R, ir√° directamente al enlace de la Red Completa de Archivos R ([CRAN](https://cran.rstudio.com/)) en la cual podr√° iniciar la descarga una vez seleccione el link correspondiente a su sistema base. Posterior a la descarga deber√° abrir este archivo con el cual iniciar√° la instalaci√≥n de esta nueva aplicaci√≥n de manera similar, se realizar√° la descarga de la aplicaci√≥n RStudio dependiendo del sistema operativo.

[![Posit - Download RStudio Desktop](princip.png)](https://posit.co/download/rstudio-desktop/)

Una vez iniciado el proceso de instalaci√≥n de R, notara la aparici√≥n de recuadros con informaci√≥n relacionada a la carpeta en que se instalar√° el programa y una serie de configuraciones las cuales se muestran a continuaci√≥n y se recomienda dejar de manera predeterminada por la empresa.
:::

#### Gu√≠a de Instalaci√≥n de R para Usuarios Windows

![P√°gina de descarga de R](installR.png)

![P√°gina principal de CRAN](p1.png)

![Paso 1 para descargar instalador de R en Windows](pp1.png)

![Paso 2 para descargar instalador de R en Windows](p2pw.png)

![Paso 3 para descargar instalador de R en Windows](p3pw.png)

Tras ejecutar el archivo descargado, lo primero que aparecer√° ser√° una ventana que permitir√° elegir el idioma a utilizar durante la instalaci√≥n. Para este manual utilizaremos ‚ÄúEspa√±ol‚Äù.

![Paso 1 instalaci√≥n de R en Windows](idioma.png)

![Paso 2 instalaci√≥n de R en Windows](info.png)

![Paso 3 instalaci√≥n de R en Windows](donde.png)

![Paso 4 instalaci√≥n de R en Windows](componentes.png)

![Paso 5 instalaci√≥n de R en Windows](confi.png)

![Paso 6 instalaci√≥n de R en Windows](carpeta.png)

![Paso 7 instalaci√≥n de R en Windows](tareas.png)

Una vez termines todos los pasos descritos anteriormente, da clic en la opci√≥n **Finalizar** y ya estar√°s listo para continuar con la instalaci√≥n de la interfaz gr√°fica RStudio.

![Paso 8 instalaci√≥n de R en Windows](finalizar.png)

#### Gu√≠a de Instalaci√≥n de RStudio para Usuarios Windows

![P√°gina de descarga de RStudio](rstu.png)

![Paso 1 instalaci√≥n de RStudio en Windows](rs1.png)

![Paso 2 instalaci√≥n de RStudio en Windows](rs2.png)

![Paso 3 instalaci√≥n de RStudio en Windows](rs3.png)

### üëÄ Dise√±o del panel

Una vez abierta la aplicaci√≥n Rstudio evidenciar√° la siguiente ventana:

![](rstudio-panes-labeled.jpeg)

::: {style="text-align: justify;"}
A continuaci√≥n se dar√° una breve explicaci√≥n de las caracter√≠sticas de cada panel:

-   **Source (fuente):** Es el espacio para escribir un nuevo script, crear un nuevo documento o cargar uno guardado previamente en nuestra computadora. En este cuadrante podemos seleccionar una o varias l√≠neas de c√≥digo para ejecutarlas.

-   **Console (consola):** El panel de consola proporciona un √°rea para ejecutar c√≥digo de forma interactiva. Por defecto est√° vinculado a R, pero tambi√©n puede proporcionar una consola Python si lo requieres.

-   **Enviroments (ambientes):** contiene las pesta√±as **Environment**, donde se almacenan los datos, valores y funciones definidas **History**, **Connections**, en caso de enlazar la sesi√≥n a alg√∫n servidor, **Build**, **VCS**, y **Tutorial**

-   **Output (salida):** contiene las pesta√±as **Files, Plots, Packages, Help, Viewer,** y **Presentation**.
:::

### üë£ Bases de la programaci√≥n en R

::: {style="text-align: justify;"}
Nos concentraremos principalmente en el panel de **Source** en el cual crearemos un nuevo documento, un R script, en el cual iremos consignando nuestras primeras lineas de c√≥digo.

Por otra parte, piensa en el panel de **Console** el cual har√° las veces de calculadora y ser√° la herramienta por medio de la cual ejecutaremos nuestro c√≥digo. Podremos hacer cuentas r√°pidas o realizar operaciones de todo tipo pero ten en cuenta que estas no se guardar√°n.

El R Script ser√° nuestro documento y la Consola nuestra hoja de notas y desarrollos. El R Script ser√° nuestra ruta de procedimientos e instrucciones a R que nos mostrar√° los resultados que le solicitemos por medio de la Consola.

En el **Enviroment** podremos ver los objetos guardados, veremos como en ocasiones ser√° de utilidad guardar objetos all√≠ para usarlos en el desarrollo de nuestras tareas.
:::

::: callout-tip
¬øSab√≠as que R es un lenguaje de programaci√≥n orientada a objetos? R es un lenguaje orientado a objetos, lo que significa que trabaja con **estructuras llamadas objetos** que agrupan datos y funciones. Por ejemplo, cuando creas un conjunto de datos, una gr√°fica o un modelo, est√°s creando un objeto. Cada objeto tiene **propiedades (atributos)** y puede ser manipulado con funciones espec√≠ficas. Esto hace que R sea muy flexible y te permita **organizar tu trabajo de forma clara y reutilizable**.
:::

::: {style="text-align: justify;"}
Como mencionamos anteriormente, uno de los usos mas b√°sicos que podemos aprovechar de R es usarlo como una calculadora. Desde operaciones elementales hasta algo un poco m√°s avanzado. Ten en cuenta que no podremos ver los pasos para resolver la operaci√≥n, funci√≥n que no est√° integrada en este software como s√≠ lo est√° en Wolfram Mathematica.
:::

::: callout-tip
En R, cuando tenemos varias operaciones ocurriendo al mismo tiempo, en realidad, algunas de ellas son realizadas antes que otras y el resultado de ellas depender√° de este orden. Este orden sigue la jerarqu√≠a matem√°tica est√°ndar, aritm√©ticas, relacionales, l√≥gicas y de asignaci√≥n.
:::

| Orden | Operadores                | Simbolo                               |
|-------|---------------------------|---------------------------------------|
| 1     | Par√©ntesis (Corchetes)    | `()` , `[]`                           |
| 2     | Exponentes                | `^`                                   |
| 3     | Multiplicaci√≥n y Divisi√≥n | `*` , `/`                             |
| 4     | Suma o Resta              | `+` , `-`                             |
| 5     | Relacionales              | `<` , `<=` , `>` , `>=` , `==` , `!=` |
| 6     | L√≥gicos                   | `!` , `&` , `|`                       |
| 7     | Asignaci√≥n                | `<-`                                  |

Iniciemos realizando una operaci√≥n b√°sica en la consola, realicemos la suma entre 23 y 58.

```{r}
23 + 58
```

Guardemos ese resultado, definiendo que el total es igual a esta suma

```{r}
total = 23 + 58
```

Multipiquemos el resultado por 3

```{r}
total * 3
```

::: {style="text-align: justify;"}
Detr√°s de este proceso lo que realizamos fue, una suma de dos n√∫meros enteros, creamos un objeto llamado total en el que almacenamos la suma, luego llamamos ese objeto de total y lo usamos como una forma abreviada para realizar el producto.

Cuando creamos un objeto usualmente utilizamos el signo `=` o el s√≠mbolo `<-`. Tenga en cuenta que hay palabras que no pueden ser utilizadas a la hora de crear un objeto, estas son de uso exclusivo para funciones y algunas se muestran a continuaci√≥n:

**Reserved Words:**

`if` , `else` , `repeat` , `while` , `fuction` , `for` , `in` , `next` , `break` , `TRUE` , `FALSE` , `NULL` , `Inf` , `NaN` , `NA` .

Adem√°s, tenga en cuenta que para los nombres definidos para las variables:

-   Un nombre de variable debe empezar por una letra y puede ser una combinaci√≥n de letras, d√≠gitos, punto(.) y gui√≥n bajo(\_). Si empieza por punto(.), no puede ir seguido de un d√≠gito.

-   Un nombre de variable no puede empezar por un n√∫mero ni por un gui√≥n bajo (\_).

-   Los nombres de las variables distinguen entre may√∫sculas y min√∫sculas (age, Age y AGE son tres variables diferentes)
:::

### üî¢ Tipos de datos: asignaci√≥n y verificaci√≥n

| Tipo        | Descripci√≥n                          | Ejemplo         |
|-------------|--------------------------------------|-----------------|
| `numeric`   | N√∫meros reales (decimales o enteros) | `3.14`, `-2`    |
| `integer`   | N√∫meros enteros                      | `2L`, `-5L`     |
| `character` | Cadenas de texto                     | `"Estad√≠stica"` |
| `logical`   | Valores l√≥gicos                      | `TRUE`, `FALSE` |
| `complex`   | N√∫meros complejos                    | `1 + 2i`        |
| `NA`        | Dato faltante o no disponible        | `NA`            |

::: {style="text-align: justify;"}
Para averiguar el tipo de dato, podemos usar las siguientes funciones `typeof(x)`, `class(x)` y `str(x)`. Para confirmar un tipo de dato tambi√©n podemos usar `is.na(x)`, `is.numeric(x)`, `is.character` .

```{r}
a<-pi
a
b<--2
b
c<-"Estad√≠stica"
c
d<-2==3
d
e<-1+5i
e
```

Para averiguar el tipo de dato, podemos usar las siguientes funciones `typeof(x)`, `class(x)` y `str(x)`. Para confirmar un tipo de dato tambi√©n podemos usar `is.na(x)`, `is.numeric(x)`, `is.character`.
:::

::: callout-tip
En R, no es lo mismo un n√∫mero algebraico entero a un tipo de dato entero. Los n√∫meros enteros como lo son 0, -2, 8, 400, -26 son un ejemplo de tipo de datos num√©ricos en R. Sin embargo, los tipos de datos enteros los encontramos, por ejemplo, al consultar `length(x)` las dimensiones de las estructuras de datos son un claro ejemplo de tipo de dato entero.
:::

### üèõÔ∏è Estructuras de datos

::: {style="text-align: justify;"}
Existen formas m√°s complejas de almacenar datos, estas son por ejemplo, vectores, matrices, dataframes y listas, este √∫ltimo es bastante vers√°til pues permite almacenar objetos y estructuras de diferentes clases.
:::

| Estructura | Descripci√≥n | Ejemplo |
|----|----|----|
| `vector` | Secuencia de elementos del mismo tipo | `c(1, 2, 3)` |
| `matrix` | Arreglo bidimensional con elementos del mismo tipo | `matrix(1:4, nrow = 2)` |
| `array` | Arreglo multidimensional | `array(1:8, dim = c(2,2,2))` |
| `list` | Contenedor de elementos de diferentes tipos | `list(1, "a", TRUE)` |
| `data.frame` | Tabla de datos con columnas de tipos distintos | `data.frame(x = 1:3, y = c("a", "b", "c"))` |
| `factor` | Variable categ√≥rica con niveles | `factor(c("alto", "bajo", "medio"))` |
| `tibble` | Versi√≥n moderna de `data.frame` del paquete `tibble` | `tibble(x = 1:3, y = letters[1:3])` |

#### Vectores y Matrices

::: {style="text-align: justify;"}
Los vectores y matrices son arreglos de m√°s de una dimensi√≥n $n$x$1$ o $n$x$m$, respectivamente, estos pueden contener datos de texto, num√©ricos y l√≥gicos, entre otros. Las siguientes son diversas formas de crear vectores

```{r}
c(1,2,3)
y<-c(0:10)
y
x<-c(seq(from=0,to=100,by=10))
x
c(rep("a,b",times=5))
```

En `R` el producto punto entre vectores se realiza usando el comando `%*%` asegur√°ndonos de que las dimensiones coincidan (usamos `t()` para transponer), por otro lado la suma y el producto entre vectores se realiza elemento a elemento, de esta forma tambi√©n est√° definida la divisi√≥n entre vectores, ya que se realiza elemento a elemento. Podemos acceder a partes espec√≠ficas de un vector seg√∫n su posici√≥n, concatenar vectores y apilarlos vectores de forma vertical `cbind()` y horizontal `rbind()`.

```{r}
x+y
x*y
2*x
y/x
x%*%t(y)
t(x)%*%y
x[3]
cbind(x,y)
rbind(x,y)
c(x,y)
```

```{r}
A<-matrix(1:9, nrow = 3)
A
B<-diag(c(1:3))
B
matrix(NA, ncol = 3,nrow = 2)
```

La suma y el producto de matrices se realiza elemento a elemento, se usa el comando `%*%` para calcular el producto usual entre matrices siempre las dimensiones sean las correctas, usamos `solve()` para calcular la inversa siempre que la matriz sea no singular, para calcular la traspuesta de una matriz escribimos `t(x)`, si se quiere extraer la diagonal usamos `diag()`, para el c√°lculo de el determinante se usa `det()`. De forma similar a los vectores, podemos acceder a las filas, columnas y entradas de una matriz y unirlas vertical u horizontalmente.

```{r}
A+B
A*B
A%*%B
solve(B)
diag(A)
det(B)
A[,1]
B[1,]
B[c(1,2),c(2,3)]
cbind(A,B)
rbind(A,B)
```
:::

#### Dataframes

::: {style="text-align: justify;"}
Los dataframes son conjuntos de datos de dimensi√≥n $n$x$m$, estos pueden contener diferentes variables, usualmente ubicadas por columna, as√≠ como mezclar diferentes tipos de datos, pueden ser exportadas y estar en diversos formatos como `.xlsx`,`.csv`,`.txt` entre otros, o ser cargadas o creadas directamente desde `R`.
:::

### üéä Bonus

#### Atajos y comandos r√°pidos

|    Comando     | Espacio |                 Funci√≥n                 |
|:--------------:|:-------:|:---------------------------------------:|
|       ‚¨ÜÔ∏è       | Consola | Volver a mostrar los c√≥digos anteriores |
|    Ctrl + L    | Consola |             Limpiar Consola             |
|  Ctrl + Enter  | Script  |         Correr l√≠nea de c√≥digo          |
| Ctrl + Alt + R | Script  |               Correr todo               |
|    Ctrl + S    | Script  |                 Guardar                 |
|    Ctrl + F    | Script  |                 Guardar                 |
|       \#       | Script  | Insertar alg√∫n comentario en el c√≥digo  |

#### Funciones √∫tiles

| Funci√≥n | Descripci√≥n |
|----|----|
| getwd() | Devuelve la direcci√≥n del documento en el directorio de trabajo actual del proceso `R` |
| setwd() | Definir una direcci√≥n del directorio de trabajo para la sesi√≥n actual |
| rm(object) | Eliminar del `Enviroment` alg√∫n elemento guardado, como `value`, `dataframe`, `function`, etc. |
| rm(list=ls()) | Eliminar todos los elementos del `Enviroment` |
| keepit \<- c("data1", "data2") rm(list = setdiff(ls(), keepit)) | En caso de desear mantener solo unos objetos y eliminar el resto |
| rm(list = setdiff(ls(), c("database_1", "database_2"))) | Eliminar todos los objetos del enviroment menos los especificados |
| gc() | Liberar RAM |

#### Guardar y abrir objetos creados

En caso de querer guardar un objeto creado de cualquier tipo se recomiendan las siguientes funciones:

```{r}
#| eval: false
#| warning: false
# Para Guardar el Objeto en formato .rds
saveRDS(mi_df, "file_folder/datos_limpios.mi_df")

# Para volver a cargar mi objeto
mi_df <- readRDS("file_folder/datos_limpios.mi_df")

# Para guardar varios objetos en formato .RData
save(df, diccionario_var, plot1, file= here("data_clean", "base2.RData"))
load(here("data_clean", "base2.RData"))
```

La funci√≥n `here` del paquete del mismo nombre es √∫til para tener mas control y especificar un *folder file* del **directorio de trabajo** en el que se este trabajando.

### üì¶ ¬øQu√© son los paquetes (`Packages`) y las librer√≠as (`Libraries`) y por qu√© son tan importantes?

::: {style="text-align: justify;"}
Si bien hasta este punto no hemos requerido la instalaci√≥n de ning√∫n paquete, ser√°n indispensables a la hora de necesitar funciones y procedimientos que no vengan incluidos en la base de R. Por defecto, R nos proporciona lo suficiente para aprovechar las ventajas de este lenguaje. nos permite realizar operaciones entre objetos de diferente tipo, cargar datos como veremos en el siguiente modulo, realizar consultas de estos y usar una gran cantidad de funciones matem√°ticas y estad√≠sticas. Sin embargo, ya veremos que en ocasiones esto no es suficiente y con el prop√≥sito de realizar operaciones m√°s avanzadas, optimizar procesos al interior del programa o usar repositorios y datos ya consolidados, ser√° de gran utilidad y nos facilitar√° gran parte del trabajo aprender a usar estas dependencias externas.
:::

::: callout-note
En R los comando para realizar la instalaci√≥n de un determinado paquete, son:

install.packages("Boruta") \# Esta instalaci√≥n se realiza por √∫nica vez en el software.

Una vez realizada la instalaci√≥n, cada que queramos utilizar las funciones de este paquete, llamaremos la librer√≠a al inicio del documento o en la secci√≥n anterior a usar alguna de sus funciones, por medio de la siguiente instrucci√≥n:

library(Boruta) \# En cada script que deseemos usar alguna de las funciones de esta librer√≠a.

Un an√°logo a este procedimiento ser√≠a en `python` cuando definimos:

pip install tensorflow

import tensorflow as tf
:::

## üóÇ Tareas y Repaso

::: {style="text-align: justify;"}
-   **Instalaci√≥n y Configuraci√≥n de RStudio y R**

    -   Descarga ambos programas siguiendo las instrucciones del m√≥dulo

-   **Exploraci√≥n de la interfaz y atajos**

    -   Abre RStudio y crea un nuevo script. Usa al menos tres atajos de teclado (por ejemplo, `Ctrl + Enter` para ejecutar una l√≠nea, `Ctrl + S` para guardar, `Alt + -` para insertar el operador de asignaci√≥n \<-).
    -   Escribe un comentario en el script explicando qu√© hace cada atajo que usaste. Guarda el script con el nombre `exploracion_atajos.R`.

-   **Operaciones b√°sicas y tipos de datos**

    -   Crea cuatro variables en R que representen diferentes tipos de datos: un n√∫mero entero (`integer`), un n√∫mero decimal (`numeric`), una cadena de texto (`character`) y un valor l√≥gico (`logical`).
    -   Realiza una operaci√≥n aritm√©tica con las variables num√©ricas (por ejemplo, suma o multiplicaci√≥n) y una concatenaci√≥n con la variable de texto usando `paste()`.
    -   Usa la funci√≥n `class()` para verificar el tipo de dato de cada variable y muestra los resultados en la consola.

-   **Estructuras de datos**

    -   Crea un vector con los nombres de cinco frutas y una lista con tres elementos: un n√∫mero, un texto y un vector de n√∫meros (por ejemplo, `c(1, 2, 3)`).
    -   Accede al segundo elemento del vector de frutas y al primer elemento de la lista usando la indexaci√≥n (por ejemplo, `vector[2]` o `lista[[1]]`).
    -   Imprime ambos resultados en la consola.

-   **Uso de una funci√≥n b√°sica y paquetes**

    -   Instala el paquete dplyr usando `install.packages("dplyr")` y c√°rgalo con `library(dplyr)` .
    -   Crea un data frame simple con dos columnas: una con nombres de personas (m√≠nimo 3) y otra con sus edades.

-   **Guardar y cargar datos**

    -   Guarda el data frame creado en la tarea anterior como un archivo .`RData` usando la funci√≥n `save()`.
    -   Cierra RStudio, vuelve a abrirlo, y carga el archivo `.RData` con `load()`.
    -   Escribe en el script un comentario que indique si el data frame se carg√≥ correctamente (por ejemplo, verificando con `print()`).

En caso de obtener alg√∫n mensaje de error (warnings) en la consola, verifica a qu√© se pudo deber, invest√≠galo y corr√≠gelo hasta obtener una salida esperada. Recuerda que si no estas seguro de c√≥mo implementar alguna funci√≥n puedes utilizar el comando `?help` en la consola para acceder a la ayuda en la que encontrar√°s la documentaci√≥n de paquetes y funciones implementadas en `R`.
:::

::: {.callout-warning collapse="true" style="text-align: justify;" icon="false"}
## üìö **Bibliograf√≠a**

-   Wickham, Hadley; √áetinkaya-Rundel, Mine & Grolemund, Garrett. 2023. *R for Data Science, 2nd Edition*. O'REILLY. <https://r4ds.hadley.nz/>

-   Alonso, Julio C√©sar & Ocampo, Maria Paula. *Empezando a usaR: Una gu√≠a paso a paso*. Universidad Icesi. <https://www.icesi.edu.co/editorial/empezando-usar-web/>
:::

::: {style="text-align: center;"}
Copyright ¬© 2025 Jose Miguel Leon - Created with [Quarto](https://quarto.org)
:::
